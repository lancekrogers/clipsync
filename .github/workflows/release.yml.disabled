name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (e.g., v1.0.0)'
        required: true

permissions:
  contents: write

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.tag }}"
        else
          VERSION="${{ github.ref_name }}"
        fi
        echo "version=${VERSION#v}" >> $GITHUB_OUTPUT

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag
        PREV_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        
        # Generate changelog
        if [ -z "$PREV_TAG" ]; then
          CHANGES=$(git log --pretty=format:"- %s (%an)" --no-merges)
        else
          CHANGES=$(git log --pretty=format:"- %s (%an)" --no-merges ${PREV_TAG}..HEAD)
        fi
        
        # Group by type
        FEATURES=$(echo "$CHANGES" | grep -i "feat:" || true)
        FIXES=$(echo "$CHANGES" | grep -i "fix:" || true)
        DOCS=$(echo "$CHANGES" | grep -i "docs:" || true)
        OTHER=$(echo "$CHANGES" | grep -v -E "(feat:|fix:|docs:)" || true)
        
        # Create changelog
        {
          echo "CHANGELOG<<EOF"
          echo "## What's Changed"
          echo ""
          if [ -n "$FEATURES" ]; then
            echo "### Features"
            echo "$FEATURES"
            echo ""
          fi
          if [ -n "$FIXES" ]; then
            echo "### Bug Fixes"
            echo "$FIXES"
            echo ""
          fi
          if [ -n "$DOCS" ]; then
            echo "### Documentation"
            echo "$DOCS"
            echo ""
          fi
          if [ -n "$OTHER" ]; then
            echo "### Other Changes"
            echo "$OTHER"
            echo ""
          fi
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREV_TAG}...v${{ steps.get_version.outputs.version }}"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.get_version.outputs.version }}
        release_name: ClipSync v${{ steps.get_version.outputs.version }}
        body: |
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ### macOS
          ```bash
          # Universal binary (works on both Intel and Apple Silicon)
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/clipsync-macos-universal.tar.gz | tar xz
          sudo mv clipsync /usr/local/bin/
          
          # Or install via Homebrew (coming soon)
          # brew install clipsync
          ```
          
          ### Linux
          ```bash
          # x86_64
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/clipsync-linux-x86_64.tar.gz | tar xz
          sudo mv clipsync /usr/local/bin/
          
          # ARM64
          curl -L https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.version }}/clipsync-linux-aarch64.tar.gz | tar xz
          sudo mv clipsync /usr/local/bin/
          ```
        draft: false
        prerelease: false

  build-release:
    name: Build Release - ${{ matrix.name }}
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            cross: false
          - name: linux-aarch64
            os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            cross: true
          - name: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
            cross: false
          - name: macos-aarch64
            os: macos-14  # M1 runner
            target: aarch64-apple-darwin
            cross: false

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.target }}

    - name: Install Linux dependencies
      if: runner.os == 'Linux' && !matrix.cross
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config libx11-dev libxcb1-dev libxrandr-dev libdbus-1-dev

    - name: Install cross
      if: matrix.cross
      run: cargo install cross --git https://github.com/cross-rs/cross

    - name: Build release binary
      run: |
        if [ "${{ matrix.cross }}" = "true" ]; then
          cross build --release --target ${{ matrix.target }}
        else
          cargo build --release --target ${{ matrix.target }}
        fi

    - name: Strip binary
      if: '!matrix.cross'
      run: |
        if [ "${{ runner.os }}" = "Linux" ]; then
          strip target/${{ matrix.target }}/release/clipsync
        else
          strip -u -r target/${{ matrix.target }}/release/clipsync
        fi

    - name: Package binary
      run: |
        cd target/${{ matrix.target }}/release
        tar czf clipsync-${{ matrix.name }}.tar.gz clipsync
        shasum -a 256 clipsync-${{ matrix.name }}.tar.gz > clipsync-${{ matrix.name }}.tar.gz.sha256

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/clipsync-${{ matrix.name }}.tar.gz
        asset_name: clipsync-${{ matrix.name }}.tar.gz
        asset_content_type: application/gzip

    - name: Upload Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: target/${{ matrix.target }}/release/clipsync-${{ matrix.name }}.tar.gz.sha256
        asset_name: clipsync-${{ matrix.name }}.tar.gz.sha256
        asset_content_type: text/plain

  build-universal-macos:
    name: Build Universal macOS Binary
    needs: [create-release, build-release]
    runs-on: macos-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download macOS binaries
      run: |
        mkdir -p binaries
        cd binaries
        curl -L -O "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/clipsync-macos-x86_64.tar.gz"
        curl -L -O "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/clipsync-macos-aarch64.tar.gz"
        
        # Extract binaries
        tar xzf clipsync-macos-x86_64.tar.gz
        mv clipsync clipsync-x86_64
        tar xzf clipsync-macos-aarch64.tar.gz  
        mv clipsync clipsync-aarch64

    - name: Create universal binary
      run: |
        cd binaries
        lipo -create -output clipsync-universal clipsync-x86_64 clipsync-aarch64
        file clipsync-universal
        
        # Package universal binary
        tar czf clipsync-macos-universal.tar.gz clipsync-universal
        shasum -a 256 clipsync-macos-universal.tar.gz > clipsync-macos-universal.tar.gz.sha256

    - name: Upload Universal Binary
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: binaries/clipsync-macos-universal.tar.gz
        asset_name: clipsync-macos-universal.tar.gz
        asset_content_type: application/gzip

    - name: Upload Universal Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: binaries/clipsync-macos-universal.tar.gz.sha256
        asset_name: clipsync-macos-universal.tar.gz.sha256
        asset_content_type: text/plain

  build-packages:
    name: Build Packages
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Download release artifacts
      run: |
        mkdir -p artifacts
        cd artifacts
        for platform in linux-x86_64 linux-aarch64 macos-x86_64 macos-aarch64; do
          curl -L -O "https://github.com/${{ github.repository }}/releases/download/v${{ needs.create-release.outputs.version }}/clipsync-${platform}.tar.gz"
        done

    - name: Create universal installer
      run: |
        cat > install.sh << 'EOF'
        #!/bin/bash
        set -e
        
        VERSION="${{ needs.create-release.outputs.version }}"
        REPO="${{ github.repository }}"
        
        # Detect OS and architecture
        OS=$(uname -s | tr '[:upper:]' '[:lower:]')
        ARCH=$(uname -m)
        
        case "$OS" in
          darwin) OS="macos" ;;
          linux) OS="linux" ;;
          *) echo "Unsupported OS: $OS"; exit 1 ;;
        esac
        
        case "$ARCH" in
          x86_64) ARCH="x86_64" ;;
          aarch64|arm64) ARCH="aarch64" ;;
          *) echo "Unsupported architecture: $ARCH"; exit 1 ;;
        esac
        
        # Download and install
        URL="https://github.com/${REPO}/releases/download/v${VERSION}/clipsync-${OS}-${ARCH}.tar.gz"
        echo "Downloading ClipSync ${VERSION} for ${OS}-${ARCH}..."
        
        curl -L "$URL" | tar xz
        sudo mv clipsync /usr/local/bin/
        
        echo "ClipSync ${VERSION} installed successfully!"
        echo "Run 'clipsync --help' to get started."
        EOF
        
        chmod +x install.sh

    - name: Upload installer
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: install.sh
        asset_name: install.sh
        asset_content_type: text/plain

  publish-crates:
    name: Publish to crates.io
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev pkg-config libx11-dev libxcb1-dev libxrandr-dev libdbus-1-dev

    - name: Publish to crates.io
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
      run: |
        cargo publish --dry-run
        # Uncomment when ready to publish
        # cargo publish

  update-homebrew:
    name: Update Homebrew Formula
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
    - name: Update Homebrew formula
      run: |
        echo "Homebrew formula update would go here"
        # This would typically involve:
        # 1. Cloning the homebrew tap repository
        # 2. Updating the formula with new version and checksums
        # 3. Creating a PR to the tap repository